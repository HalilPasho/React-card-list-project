{"version":3,"sources":["greece.jpg","components/card/card.jsx","components/card-list/card-list.jsx","components/search-box/search-box.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","card","props","className","alt","src","item","id","name","email","cardList","monster","map","key","searchBox","placeholder","handleChanger","type","onChange","App","handleChange","e","setState","searchField","target","value","state","Axios","get","then","res","data","catch","err","console","log","this","filteredMonsters","filter","toLowerCase","includes","style","color","fontSize","Greece","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"oFAAAA,EAAOC,QAAU,IAA0B,oC,6QCG5B,SAASC,EAAKC,GAC3B,OACE,yBAAKC,UAAU,kBACb,yBACEC,IAAI,UACJC,IAAG,+BAA0BH,EAAMI,KAAKC,GAArC,4BAEL,4BAAKL,EAAMI,KAAKE,MAChB,2BAAIN,EAAMI,KAAKG,QCPrB,IAUeC,EAVE,SAACR,GAChB,OACE,yBAAKC,UAAU,aACZD,EAAMS,QAAQC,KAAI,SAACN,GAAD,OACjB,kBAAC,EAAD,CAAMO,IAAKP,EAAKC,GAAID,KAAMA,S,+BCLnB,SAASQ,EAAT,GAAoD,IAA/BC,EAA8B,EAA9BA,YAAaC,EAAiB,EAAjBA,cAC/C,OACE,6BACE,2BACEb,UAAU,SACVc,KAAK,SACLF,YAAaA,EACbG,SAAUF,K,qBC6BHG,E,kDA/Bb,aAAe,IAAD,8BACZ,gBAOFC,aAAe,SAACC,GACb,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAPvC,EAAKC,MAAQ,CACXf,QAAS,GACTY,YAAa,IAJH,E,gEAYM,IAAD,OACjBI,IAAMC,IAAI,8CACTC,MAAK,SAAAC,GAAG,OAAI,EAAKR,SAAS,CAACX,QAASmB,EAAIC,UACxCC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,Q,+BAElB,IAAD,EACwBG,KAAKV,MAA7Bf,EADA,EACAA,QAASY,EADT,EACSA,YACVc,EAAmB1B,EAAQ2B,QAAO,SAAA3B,GAAO,OAAIA,EAAQH,KAAK+B,cAAcC,SAASjB,EAAYgB,kBAEnG,OACE,yBAAKpC,UAAU,OACb,0BAAMA,UAAU,UAAS,wBAAIsC,MAAO,CAACC,MAAM,UAAWC,SAAS,SAAtC,qBAAzB,IAA+F,yBAAKxC,UAAU,KAAKC,IAAI,UAAUC,IAAKuC,OACvI,kBAAC,EAAD,CAAW7B,YAAY,iBAAiBC,cAAeoB,KAAKhB,eAC3D,kBAAC,EAAD,CAAUT,QAAS0B,S,GA1BTQ,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7B,MAAK,SAAA8B,GACJA,EAAaC,gBAEd5B,OAAM,SAAA6B,GACL3B,QAAQ2B,MAAMA,EAAMC,c","file":"static/js/main.c1c37293.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/greece.fed8d09b.jpg\";","import React from 'react';\nimport './card.css';\n\nexport default function card(props) {\n  return (\n    <div className=\"card-container\">\n      <img\n        alt=\"monster\"\n        src={`https://robohash.org/${props.item.id}?set=set2&size=180x180`}\n      />\n      <h2>{props.item.name}</h2>\n      <p>{props.item.email}</p>\n    </div>\n  );\n}\n","import React from 'react';\nimport './card-list.css';\nimport Card from '../card/card';\n\nconst cardList = (props) => {\n  return (\n    <div className=\"card-list\">\n      {props.monster.map((item) => (\n        <Card key={item.id} item={item} />\n      ))}\n    </div>\n  );\n};\n\nexport default cardList;\n","import React from 'react';\nimport './search-box.css';\n\nexport default function searchBox({ placeholder, handleChanger }) {\n  return (\n    <div>\n      <input\n        className=\"search\"\n        type=\"search\"\n        placeholder={placeholder}\n        onChange={handleChanger}\n      />\n    </div>\n  );\n}\n","import React, { Component } from 'react';\nimport Cardlist from './components/card-list/card-list'\nimport './App.css';\nimport Axios from 'axios';\nimport SearchBox from './components/search-box/search-box';\nimport Greece from './greece.jpg'\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      monster: [],\n      searchField: ''\n    }\n  }\n\n  handleChange = (e) => {\n     this.setState({ searchField: e.target.value })\n  }\n\n  componentDidMount(){\n    Axios.get('https://jsonplaceholder.typicode.com/users')\n    .then(res => this.setState({monster: res.data}))\n    .catch(err => console.log(err))\n  }\n  render() {\n    const {monster, searchField} = this.state;\n    const filteredMonsters = monster.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()))\n    \n    return (\n      <div className=\"App\">\n        <span className='images'><h1 style={{color:'#7adbf5', fontSize:'40px'}}>Rroft Vorio Epiri</h1> <img className='gr' alt='elladha' src={Greece}/></span>\n       <SearchBox placeholder=\"search monster\" handleChanger={this.handleChange}/>\n        <Cardlist monster={filteredMonsters}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}